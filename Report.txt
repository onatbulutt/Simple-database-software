This study is related to a simple database software for the some company. In this database, information about customers and, if applicable, the products they have purchased is stored.

The work has been created in the NetBeans environment and consists of five classes: Customer, Item, DB_Interface, Database, and Main.
To briefly describe these classes, the Customer class holds variables for customer information, the Item class holds variables for product information, the DB_Interface class outlines methods to be used for the database, the Database class contains methods for the database, and the Main class includes the necessary code for invoking these methods.

In the Customer class, the variables related to the customer are, in order, the customer's name, surname, and ID. In the Item class, the variables related to the products purchased by customers are, in order, the product's name, the date of purchase, and the paid amount. Additionally, in both classes, a variable named Link is present to create a linked list structure between the customer and the items they purchased.

The variables held in the Customer and Item classes are in a private structure, and getter and setter methods have been used for each variable to allow control from other classes. 
To perform operations on the database, eight methods have been used in the Database class. These methods are addCustomer, listItems, getNewCustomer, addNewItem, getTotalTradeofCustomer, getTotalTrade, readFromFile, and search_Customer. Additionally, within this class, there is an array named customers to store both added and read customers along with their information.
The purpose of the addCustomer method is to add a new customer to the database. It takes a Customer object as a parameter, and the Customer object to be added should have been created elsewhere. After the customer is added to the customers array, the index of the array is incremented.

The purpose of the listItems method is to list the information of products belonging to a customer in the database. The method takes an ID number as a parameter. Therefore, initially, the customer with this ID in the customers array is identified. Once found, the customer's name, surname, and ID are obtained. It is then checked whether the customer has any associated items. If there are items, the information about the customer's products is obtained, and these items are listed one below the other along with their variables. If there is no customer with the entered ID, the system sends a message.

The purpose of the getNewCustomer method is to create a new customer object and assign the specified name, surname, and identification number (ID) parameters to this object. The customer object created in this way can then be added to the customers array using the addCustomer method.
The purpose of the addNewItem method is to add a new item to a customer. The customer to whom the item will be added is determined by the ID number provided as a parameter. In the customers array, the customer with the given ID is located. Subsequently, a new Item object is created, and the name, purchase date, and price of the item provided as parameters are assigned to this newly created object. Once all the variables of the new item are set, it is checked whether the customer has had any previous items. If there are no existing items, the newly created object is added directly to the customer. If the customer has had other items before, the newly created object is inserted immediately after the existing items. This ensures that the newly added item is always at the beginning of the customer's list of items. If there is no customer with the entered ID, the system sends a message.

The purpose of the getTotalTradeofCustomer method is to calculate the total price of the products purchased by a customer whose ID is provided. First, the customer with the entered ID is located in the customers array. Then, the items associated with the customer are iterated through one by one. During this process, the price variables of each item are summed up, reaching the total by adding them together. If there is no customer with the entered ID, the system sends a message.

The purpose of the getTotalTrade method is to find the total expenditure made by all customers in the customers array. To achieve this, the method iterates through the customers array. During this process, it checks whether customers have product information. For customers with product information, it iterates through their product objects, summing up the values of the price variables. This way, the total expenditure is obtained.

In the readFromFile method, operations are performed based on the data read from a text file to add a customer or a product to a customer. The lines in the text file come in two formats. If a line starts with a letter, it contains the customer's name, surname, and ID number consecutively without spaces. If it starts with a number, it contains the customer's ID number to whom the product is to be added, followed by the product's ID, name, purchase date, and price, all without spaces. Using this information, the method processes the file, and separate operations are performed for each type of line. In both cases, the elements in the lines are split and added to an array sequentially. If the line starts with a letter, the name, surname, and ID number are sequentially added to an array. Subsequently, a new Customer object is created, and the elements of the array are assigned to the variables of this object. Then, the created object is added to the customers array. If the line starts with a number, the ID number, product name, purchase date, and price are assigned to an array. A new Item object is created, and the product name, date, and price from the array are assigned to the variables of this object. Then, a customer with the corresponding ID number is found in the customers array, and the created product is added to the beginning of the customer's list of products.

The purpose of the search_Customer method is to find a customer with the given ID within the customers array. The method iterates through the customers array, checking whether there is a customer with the provided ID. If found, the method returns the located customer. If there is no customer with the entered ID, the system sends a message.
